The coding for acquiring K4 (Coding book of AL Data)

1. Coding:

    def examples_generator(self):
        examples = []
        AL_D  = ['Al', 'Co', 'Cr', 'Cu', 'Fe', 'Mg', 'Mn', 'Ni', 'Si', 'Ti', 'V', 'Zn']
        Objective_name = ['YS', 'UTS', 'Elongation']
        for i in range(np.shape(self.datax_AL)[0]):
            AL = {}
            StrAL = '['
            for j in range(len(AL_D)):
                StrAL += f'{AL_D[j]} = {self.datax_AL[i,j]}'
                if j <= len(AL_D)-1:
                    StrAL += ','
            StrAL += ']'

            StrObj = '['
            for j in range(len(Objective_name)):
                StrObj += f'{Objective_name[j]} = {self.datay_AL[i,j]}'
                if j <= len(Objective_name)-1:
                    StrObj += ','
            StrObj += ']'

            AL['Q'] = '## ' + StrAL + ' ##'
            AL['A'] = '## ' + StrAL + ' ##'
            examples.append(AL)
        return examples

    def prompt_template_generator(self):
        examples = self.examples_generator()

        prefix = 'The following are the offline Al alloy data composed by the compositions and the Fitness value. \n'
        prefix += 'The corresponding fitness values includes: yield strength (YS: enhancing load-bearing capacity), ultimate tensile strength (UTS: increasing material performance under extreme conditions), and elongation (Elongation: ensuring toughness and deformability) to meet the diverse demands of various applications.\n'
        prefix += 'Firstly, you need to collect relevant knowledge about Al alloy.\n'
        prefix += 'Then, you need to analyze the relationship between the compositions and Fitness values based on offline alloy data, and then perform the regression. \n'
        prefix += f'Now I need you to combine the HEA domain knowledge with the offline data provided to you to analyze the impact of component {self.AL_id} on fitness values.  If the data is missing, you need to supplement it based on domain knowledge. \n'
        prefix += 'Your response must only contain the analyze result within 30 words. Do not generate other statement.'
        prefix += f'{examples}'

        return prefix

    def K_gnerates(self):
        FewShotprompt = self.prompt_template_generator()
        message = []
        message.append({"role": "system","content": "You are a expert in the HEA alloy research"})
        message.append({"role": "user", "content": FewShotprompt})
        client = OpenAI(
            base_url="https://api.gpts.vin/v1",
            api_key="sk-dRLkYviiOkPwiPIRPmkqjlW1X8DETPCZL3o1Vl7b4Cj4W3Hi"
        )
        while True:
            start_time = time.time()
            self.rate_limiter.add_request(request_text=FewShotprompt, current_time=start_time)
            resp = client.chat.completions.create(
                model='gpt-4o',
                messages=message,
                temperature=0.8,
            )



2. String:



